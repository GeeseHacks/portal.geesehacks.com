# This workflow is triggered on pushes (including PR merges) to the main branch. It has 3 main jobs:
# 1. Deploy to production on Vercel
# 2. Run integration tests
# 3. Run E2E tests

name: Vercel Production Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Step 1: Deploy to production on Vercel
  deploy-production:
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deploy.outputs.DEPLOYMENT_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=$VERCEL_TOKEN

      - name: Install dependencies
        run: npm install

      - name: Build Project Artifacts
        run: vercel build --prod --token=$VERCEL_TOKEN

      - name: Deploy Project Artifacts
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN --env VERCEL_ORG_ID=$VERCEL_ORG_ID --env VERCEL_PROJECT_ID=$VERCEL_PROJECT_ID)
          # Output the deployment URL for other jobs to use
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          # Output the deployment URL for the current job to use
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

#   # Step 2: Run Integration Tests
#   integration-tests:
#     runs-on: ubuntu-latest
#     needs: deploy-production
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'

#       - name: Install dependencies
#         run: npm install

#       - name: Generate Prisma Client
#         run: npx prisma generate

#       - name: Run integration Tests
#         env:
#           POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
#         run: npm run test

# # Step 3: Run E2E tests
#   e2e-tests:
#     runs-on: ubuntu-latest
#     needs: [deploy-production, integration-tests] 
#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'

#       - name: Install dependencies
#         run: npm install

#       - name: Install Cypress
#         run: npm install cypress --save-dev

#       - name: Create cypress.env.json from Secret
#         run: |
#           echo '${{ secrets.CYPRESS_ENV_JSON }}' > cypress.env.json

#       - name: Run Cypress Tests
#         env:
#           DEPLOYMENT_URL: ${{ needs.Deploy-Production.outputs.deployment-url }}
#           TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
#           TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
#         run: npx cypress run --config baseUrl=${{ env.DEPLOYMENT_URL }}
