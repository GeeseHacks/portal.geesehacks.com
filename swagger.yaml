openapi: 3.0.0
info:
  title: Registration Portal API
  version: 1.1.0
  description: API Documentation for the Registration Portal
servers:
  - url: http://localhost:3000
    description: Local server for development
tags:
  - name: auth
    description: Authentication related endpoints
  - name: users
    description: User related endpoints
  - name: application-responses
    description: Application responses related endpoints
  - name: resumes
    description: Resume related endpoints
  - name: qr-codes
    description: QR Code registration related endpoints
paths:
  /api/auth/signup:
    post:
      tags:
        - auth
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuth'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email and password are required
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Failed to create user
  /api/auth/send-reset-email:
    post:
      tags:
        - auth
      summary: Send reset password for user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        '201':
          description: Email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email sent successfully
        '400':
          description: Email is empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email is required
        '404':
          description: User's email is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Failed to generate token and send email



  /api/users/{id}:
    get:
      tags:
        - users
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users:
    post:
      tags:
        - users
      summary: Create a new user with fields in the users table
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
  /api/application-responses/{id}:
    get:
      tags:
        - application-responses
      summary: Get an application response by user ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Application response details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
  /api/application-responses:
    post:
      tags:
        - application-responses
      summary: Create a new application response
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationResponse'
      responses:
        '201':
          description: Application response created
  /api/users/resume:
    post:
      tags:
        - resumes
      summary: Upload a new resume for a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Resume uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Filename is required
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '500':
          description: Error fetching user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error fetching user
components:
  schemas:
    UserAuth:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: secret_password
    User:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for a user.
        firstname:
          type: string
          description: The user's first name.
        lastname:
          type: string
          description: The user's last name.
        age:
          type: integer
          minimum: 0
          description: The user's age.
        email:
          type: string
          description: The user's email address.
        phone_number:
          type: string
          description: The user's phone number.
        school:
          type: string
          description: The school the user attends.
        level_of_study:
          type: string
          description: The user's level of study.
        country_of_residence:
          type: string
          description: The user's country of residence.
        address:
          type: string
          description: The user's address.
        dietary_restrictions:
          type: string
          description: The user's dietary restrictions.
        github:
          type: string
          description: The user's GitHub profile URL.
        linkedin:
          type: string
          description: The user's LinkedIn profile URL.
        personal_website:
          type: string
          description: The user's personal website.
        MLH_authorize:
          type: boolean
          description: MLH authorization status.
        field_of_study:
          type: string
          description: The user's field of study.
        optional_consider:
          type: string
          description: Optional considerations.
        optional_gender:
          type: string
          description: The user's gender.
        optional_pronouns:
          type: string
          description: The user's pronouns.
        optional_race:
          type: string
          description: The user's race.
        optional_underrepresented:
          type: string
          description: Optional underrepresented group.
        other_dietary_restrictions:
          type: string
          description: Other dietary restrictions.
        resume:
          type: string
          format: uri
          description: The user's resume URL.
        t_shirt_size:
          type: string
          description: The user's t-shirt size.
        status:
          type: string
          enum:
            - ACCEPTED
            - REJECTED
            - WAITLIST
            - APPLIED
            - NOT_APPLIED
          description: The user's application status.
    ApplicationResponse:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the application response.
        userid:
          type: integer
          description: The ID of the user associated with this response.
        q1:
          type: string
          description: Answer to question 1.
        q2:
          type: string
          description: Answer to question 2.
        q3:
          type: string
          description: Answer to question 3.
    Resume:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: URL to the uploaded resume
    QRCodeRegistered:
      type: object
      properties:
        qrCodeId:
          type: string
          description: The unique identifier for the QR Code.
        userid:
          type: integer
          description: The ID of the user associated with this QR Code.
