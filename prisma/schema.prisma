generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                         String                @id @default(uuid()) @db.VarChar(36)
  firstname                  String                @db.VarChar(50)
  lastname                   String                @db.VarChar(50)
  age                        Int
  email                      String                @unique @db.VarChar(100)
  phone_number               String                @db.VarChar(20)
  school                     String                @db.VarChar(100)
  level_of_study             String                @db.VarChar(100)
  country_of_residence       String                @db.VarChar(255)
  dietary_restrictions       String                @db.VarChar(100)
  github                     String?               @db.VarChar(255)
  linkedin                   String?               @db.VarChar(255)
  personal_website           String?               @db.VarChar(255)
  MLH_authorize              Boolean?
  field_of_study             String                @db.VarChar(100)
  optional_consider          String?               @db.VarChar(255)
  optional_gender            String?               @db.VarChar(50)
  optional_pronouns          String?               @db.VarChar(50)
  optional_race              String?               @db.VarChar(50)
  optional_underrepresented  String?
  other_dietary_restrictions String?               @db.VarChar(100)
  resume                     String?               @db.VarChar(255)
  t_shirt_size               String?               @db.VarChar(50)
  status                     UserStatus
  attendedEventIds           Json?
  event_qr_code              String?               @unique @db.VarChar(255)
  project_id                 String?               @db.Uuid
  net_worth                  Int                   @default(0)
  application_responses      ApplicationResponse[]
  
  @@index([project_id])
}

model ApplicationResponse {
  id     String @id @default(uuid()) @db.VarChar(36)
  userid String
  q1     String @db.VarChar(1000)
  q2     String @db.VarChar(1000)
  user   User   @relation(fields: [userid], references: [id])

  @@index([userid])
}

model UserAuth {
  id              String    @id @default(uuid()) @db.VarChar(36)
  email           String    @unique @db.VarChar(100)
  password        String    @db.VarChar(60)
  resetToken      String?   @db.VarChar(255)
  tokenExpiration DateTime?
}

model ScannerUserAuth {
  id       String @id @db.VarChar(36)
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(60)
}

model InvestmentHistory {
  id           Int       @id @default(autoincrement())
  projectValue Int        // The project's total value after the transaction
  judgeId      Int
  projectId    Int
  createdAt    DateTime   @default(now())
  
  judge        Judge      @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([judgeId])       // Fast queries by judge
  @@index([projectId])     // Fast queries by project
  @@index([judgeId, projectId]) // Efficient queries for judge-project-specific history
}


model Judge {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  login_key      String       @unique @db.VarChar(255)
  availableFunds Int          @default(10000)
  InvestmentHistory     InvestmentHistory[]
  projects  JudgeProject[]
  categories  JudgeCategory[] // Many-to-many relationship with Category

  @@index([name])
}

model JudgeProject {
  judgeId    Int
  projectId  Int

  judge      Judge          @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  project    Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([judgeId, projectId]) // Composite primary key for uniqueness
  @@index([judgeId])         // Index for fast queries by judge
}

model Project {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  description        String               @db.VarChar(255)
  devpostLink        String               @db.VarChar(255)
  imageUrl           String?              @db.VarChar(255)
  InvestmentHistory  InvestmentHistory[]
  categories         ProjectCategory[]
  judges             JudgeProject[]

  @@index([name]) // Do we need this?
}

model Category {
  id        Int             @id @default(autoincrement())
  name      String
  projects  ProjectCategory[]
  judges  JudgeCategory[] // Many-to-many relationship with Judge
}

model JudgeCategory {
  judgeId  Int
  categoryId Int

  judge    Judge        @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([judgeId, categoryId]) // Composite primary key for uniqueness
  @@index([judgeId])        // Index for fast queries by judge
  @@index([categoryId])       // Index for fast queries by category
}

model ProjectCategory {
  projectId       Int
  categoryId        Int
  investmentAmount Int

  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  category          Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([projectId, categoryId]) // Composite primary key for efficiency
  @@index([categoryId])         // Index for fast querying by category
}


enum UserStatus {
  ACCEPTED
  REJECTED
  WAITLIST
  NOT_APPLIED
  APPLIED
  CONFIRMED
}
