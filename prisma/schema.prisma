generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                         String                  @id @default(uuid()) @db.VarChar(36)
  firstname                  String                  @db.VarChar(50)
  lastname                   String                  @db.VarChar(50)
  age                        Int
  email                      String                  @unique @db.VarChar(100)
  phone_number               String                  @db.VarChar(20)
  school                     String                  @db.VarChar(100)
  level_of_study             String                  @db.VarChar(100)
  country_of_residence       String                  @db.VarChar(255)
  address                    String?                 @db.VarChar(255)
  dietary_restrictions       String                  @db.VarChar(100)
  github                     String?                 @db.VarChar(255)
  linkedin                   String?                 @db.VarChar(255)
  personal_website           String?                 @db.VarChar(255)
  MLH_authorize              Boolean?
  field_of_study             String                  @db.VarChar(100)
  optional_consider          String?                 @db.VarChar(255)
  optional_gender            String?                 @db.VarChar(50)
  optional_pronouns          String?                 @db.VarChar(50)
  optional_race              String?                 @db.VarChar(50)
  optional_underrepresented  String?
  other_dietary_restrictions String?                 @db.VarChar(100)
  resume                     String?                 @db.VarChar(255)
  t_shirt_size               String?                 @db.VarChar(50)
  status                     UserStatus

  application_responses      ApplicationResponse[]   // Relation to ApplicationResponse
  qrCodes                    QRCodeRegistered[]      // User can have multiple QR Codes
}

enum UserStatus {
  ACCEPTED
  REJECTED
  WAITLIST
  APPLIED
  NOT_APPLIED
}

model ApplicationResponse {
  id     String  @id @default(uuid()) @db.VarChar(36)
  userid String
  q1     String  @db.VarChar(1000)
  q2     String  @db.VarChar(1000)
  q3     String  @db.VarChar(1000)
  user   User    @relation(fields: [userid], references: [id])

  @@index([userid])
}

model UserAuth {
  id       String @id @default(uuid()) @db.VarChar(36)
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(60)
  resetToken  String? @db.VarChar(255)
  tokenExpiration DateTime?
}

model QRCodeRegistered {
  qrCodeId  String @id @db.VarChar(255)
  userid    String
  user      User   @relation(fields: [userid], references: [id])

  @@index([userid])
}

//Stock Sim, I'm lost, should both sites (hacker and judging portal) point to the same database?

model Project {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  tags             Tag[]            @relation("ProjectTags")
  investments      Investment[]     @relation("ProjectInvestments")
  totalInvestment  Int              @default(0)
  eventParticipations EventParticipation[] @relation("ProjectEventParticipations")
  judgePairs       JudgePair[]      @relation("JudgePairTeams")

  @@index([name])
}

model Judge {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  company          String?          @db.VarChar(255) // For company judges
  isGuest          Boolean          @default(false)  // To differentiate guest judges
  investments      Investment[]     @relation("JudgeInvestments")
  availableFunds   Int              @default(10000)  // Start with $10K
  judgePairsPrimary JudgePair[]     @relation("PrimaryJudge")
  judgePairsSecondary JudgePair[]   @relation("SecondaryJudge")

  @@index([name])
}

model JudgePair {
  id               Int              @id @default(autoincrement())
  primaryJudgeId   Int
  secondaryJudgeId Int
  primaryJudge     Judge            @relation("PrimaryJudge", fields: [primaryJudgeId], references: [id], onDelete: Cascade)
  secondaryJudge   Judge            @relation("SecondaryJudge", fields: [secondaryJudgeId], references: [id], onDelete: Cascade)
  projects         Project[]        @relation("JudgePairTeams")

  @@unique([primaryJudgeId, secondaryJudgeId]) // Ensures a pair is unique
}

model Investment {
  id               Int              @id @default(autoincrement())
  amount           Int
  judgeId          Int
  projectId        Int
  judge            Judge            @relation("JudgeInvestments", fields: [judgeId], references: [id], onDelete: Cascade)
  project          Project          @relation("ProjectInvestments", fields: [projectId], references: [id], onDelete: Cascade)
  createdAt        DateTime         @default(now())

  @@index([judgeId])
  @@index([projectId])
}

model EventParticipation {
  id               Int              @id @default(autoincrement())
  eventName        String           @db.VarChar(255)
  projectId        Int
  project          Project          @relation("ProjectEventParticipations", fields: [projectId], references: [id], onDelete: Cascade)
  amount           Int              @default(0) // Amount earned from participating in an event

  @@index([projectId])
}

model Tag {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(50) // "#Google"
  color            String           @db.VarChar(7)  // Diff color hex codes
  projectId        Int
  project          Project          @relation("ProjectTags", fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}
